{"version":3,"sources":["utils/items.tsx","components/task/task.tsx","components/task/add-task/add-task.tsx","components/task/edit-task/edit-task.tsx","components/tasks/tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemTypes","Users","name","ColorLabels","color","Priority","icon","Progress","Task","bucketIndex","task","updateTaskStatus","onEditTask","onUpdateCheckList","onDeleteTask","useDrag","item","type","taskId","collect","monitor","isDragging","drag","editTask","useState","anchorEl","setAnchorEl","open","Boolean","id","undefined","className","ref","style","opacity","IconButton","onClick","e","currentTarget","component","Popover","anchorOrigin","vertical","horizontal","transformOrigin","List","width","onMouseLeave","ListItem","button","ListItemText","primary","label","map","d","labelIndex","Chip","backgroundColor","variant","Checkbox","checkedIcon","onChange","ev","updatedTaskStatus","target","checked","progress","textDecoration","taskName","showCheckListOnCard","checkList","length","checkListIndex","isCompleted","completed","updateCheckList","text","showNotesOnCard","notes","trim","assignedTo","taskAssignedToIndex","ListItemIcon","AccountCircle","priority","Tooltip","title","dueDate","date","Date","getMonth","getDate","getDateFormat","filter","AddTask","props","state","startDate","find","comments","this","createTaskInBucket","setState","TextField","autoFocus","size","value","InputLabelProps","shrink","Autocomplete","multiple","limitTags","event","selection","options","filterSelectedOptions","disableCloseOnSelect","getOptionLabel","option","renderInput","params","assignedToIndex","Button","disabled","createTask","Component","EditTask","taskToEdit","onClose","buckets","onMakeNewTask","oldBucketIndex","updatedTask","setUpdatedTask","bucketId","selectedBucket","setSelectedBucket","checkListItem","setCheckListItem","disableCloseButton","setDisableCloseButton","updateStateValue","propertyName","oldValues","deleteCheckListItem","checkListItemIndex","splice","Modal","disableBackdropClick","aria-labelledby","aria-describedby","defaultValue","Grid","container","spacing","xs","FormControl","InputLabel","Select","labelId","findIndex","MenuItem","bucketName","progressIndex","priorityIndex","multiline","rows","FormGroup","row","FormControlLabel","control","LinearProgress","onBlur","makeNewTask","Number","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","generateId","push","isSaved","Tasks","tasks","isAddingNewTask","isBucketNameInEditMode","openPopoverOption","setBuckets","addingNewBucket","setAddingNewBucket","updateBucketName","setUpdateBucketName","activeBucketToAddTask","setActiveBucketToAddTask","activeBucketToEditOrDelete","setActiveBucketToEditOrDelete","setTaskToEdit","show","bucketToRemove","setBucketToRemove","notStarted","TasksBucket","isCompletedBlock","useDrop","accept","drop","sourceBucketIndex","targetBucketIndex","sourceTasks","indexOfTask","targetTasks","taskToMove","isOver","border","taskIndex","bucket","handleClose","index","newTask","openBucketOption","editBucketName","addNewTask","startIcon","Accordion","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","minWidth","newBucket","addNewBucket","newBucketIndex","getTaskIndex","oldBucketTasks","newBucketTasks","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","App","DndProvider","backend","HTML5Backend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c0c4cba.chunk.js","sourcesContent":["import NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nexport const ItemTypes = {\r\n    CARD: 'card'\r\n}\r\n\r\nexport const Users = [\r\n    { name: 'Punit Soni' },\r\n    { name: 'Hardik Joshi' },\r\n    { name: 'Ajay Modi' },\r\n    { name: 'Suresh Patel' },\r\n    { name: 'John Cena' },\r\n    { name: 'Jeff Hardy' },\r\n]\r\n\r\nexport const ColorLabels = [\r\n    {\r\n        name: \"Pink\",\r\n        color: \"#FDB0C0\"\r\n    },\r\n    {\r\n        name: \"Red\",\r\n        color: \"#FF073A\"\r\n    },\r\n    {\r\n        name: \"Yellow\",\r\n        color: \"#FFAB0F\"\r\n    },\r\n    {\r\n        name: \"Green\",\r\n        color: \"#048243\"\r\n    },\r\n    {\r\n        name: \"Blue\",\r\n        color: \"#247AFD\"\r\n    },\r\n    {\r\n        name: \"Purple\",\r\n        color: \"#BE03FD\"\r\n    }\r\n]\r\n\r\nexport const Priority = [\r\n    { name: \"Urgent\", icon: <NotificationsActiveIcon />, color: \"#FF073A\" },\r\n    { name: \"Important\", icon: <PriorityHighIcon />, color: \"#FF073A\" },\r\n    { name: \"Medium\", icon: <FiberManualRecordIcon />, color: \"#048243\" },\r\n    { name: \"Low\", icon: <ArrowDownwardIcon />, color: \"#247AFD\" },\r\n]\r\n\r\nexport const Progress = [\r\n    { name: \"Not Started\", icon: <RadioButtonUncheckedIcon />, color: \"lightgray\" },\r\n    { name: \"In Progress\", icon: <RadioButtonCheckedIcon />, color: \"#048243\" },\r\n    { name: \"Completed\", icon: <CheckCircleIcon />, color: \"#048243\" },\r\n]","import { Checkbox, Chip, IconButton, List, ListItem, ListItemIcon, ListItemText, Popover, Tooltip } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport RadioButtonUncheckedOutlinedIcon from '@material-ui/icons/RadioButtonUncheckedOutlined';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { useDrag } from 'react-dnd';\r\nimport { ItemTypes } from '../../utils/items';\r\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport './task.scss';\r\n\r\nfunction Task({ bucketIndex, task, updateTaskStatus, onEditTask, onUpdateCheckList, onDeleteTask }) {\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.CARD,\r\n            taskId: task.taskId,\r\n            bucketIndex: bucketIndex\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    function updateStatus(ev) {\r\n        updateTaskStatus({ bucketIndex: bucketIndex, taskId: task.taskId, updatedTaskStatus: ev.target.checked });\r\n    }\r\n\r\n    function updateCheckList(checkList) {\r\n        onUpdateCheckList({ bucketIndex: bucketIndex, taskId: task.taskId, checkList: checkList })\r\n    }\r\n\r\n    function editTask() {\r\n        onEditTask({ task, bucketIndex });\r\n    }\r\n\r\n    function getDateFormat(dueDate) {\r\n        const date = new Date(dueDate);\r\n        return `${date.getMonth() + 1}/${date.getDate()}`\r\n    }\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n\r\n    function handleClose() {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    function deleteTask(taskId) {\r\n        onDeleteTask(bucketIndex, taskId)\r\n    }\r\n\r\n    return <div className=\"task\" ref={drag} style={{ opacity: isDragging ? '0.5' : '1' }}>\r\n\r\n        <div className=\"task-more-options\">\r\n            <IconButton onClick={(e: any) => { setAnchorEl(e.currentTarget); }} color=\"primary\" component=\"span\">\r\n                <MoreHorizIcon />\r\n            </IconButton>\r\n\r\n            <Popover id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}>\r\n                <List style={{ width: 200 }}\r\n                    onMouseLeave={handleClose}>\r\n                    <ListItem button onClick={() => { deleteTask(task.taskId) }}>\r\n                        <ListItemText primary=\"Delete\" />\r\n                    </ListItem>\r\n                </List>\r\n\r\n            </Popover>\r\n        </div>\r\n\r\n        <div className=\"label\" onClick={editTask}>\r\n            {\r\n                task.label.map((d, labelIndex: number) => {\r\n                    return <Chip key={labelIndex} label={d.name} style={{ backgroundColor: d.color }} variant=\"outlined\" />\r\n                })\r\n            }\r\n        </div>\r\n\r\n        <div className=\"d-flex align-items-center\">\r\n            <Checkbox color=\"primary\" icon={<RadioButtonUncheckedOutlinedIcon />} checkedIcon={<CheckCircleIcon />} name=\"taskCheck\"\r\n                onChange={updateStatus} checked={task.progress.name == \"Completed\"} />\r\n            <p onClick={editTask} className=\"w-100\" style={{ textDecoration: task.progress.name == \"Completed\" ? 'line-through' : 'none' }}>{task.taskName}</p>\r\n        </div>\r\n\r\n        {\r\n            task.showCheckListOnCard == true && task.checkList.length > 0 && task.checkList.map((d: any, checkListIndex: number) => {\r\n                return !d.isCompleted ? <div key={checkListIndex} className=\"d-flex align-items-center\">\r\n                    <Checkbox color=\"primary\" icon={<RadioButtonUncheckedOutlinedIcon />} checkedIcon={<CheckCircleIcon />} name={`checklist-${checkListIndex}`}\r\n                        checked={d.completed} onChange={(ev) => {\r\n                            const checkList = task.checkList;\r\n                            checkList[checkListIndex].isCompleted = ev.target.checked;\r\n                            updateCheckList(checkList);\r\n                        }} />\r\n                    <p className=\"w-100\" onClick={editTask}>{d.text}</p>\r\n                </div> : \"\"\r\n            })\r\n        }\r\n\r\n        {\r\n            task.showNotesOnCard == true && task.notes.trim() != \"\" && <div onClick={editTask}>\r\n                <span className=\"notes\">\r\n                    {task.notes}\r\n                </span>\r\n            </div>\r\n        }\r\n\r\n        <div onClick={editTask}>\r\n            {\r\n                task.assignedTo.map((assignedTo: any, taskAssignedToIndex: number) => {\r\n                    return <ListItem key={taskAssignedToIndex} className=\"pt-0 px-0\">\r\n                        <ListItemIcon className=\"list-item-width\">\r\n                            <AccountCircle />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={assignedTo.name} />\r\n                    </ListItem>\r\n                })\r\n            }\r\n        </div>\r\n\r\n        <div className=\"d-flex gap-5\">\r\n            {\r\n                task.priority.name != \"Medium\" && <Tooltip title={task.priority.name}>\r\n                    <span className=\"d-flex align-items-center\" style={{ color: task.priority.color }} onClick={editTask}>\r\n                        {task.priority.icon}\r\n                    </span>\r\n                </Tooltip>\r\n            }\r\n\r\n            {\r\n                task.progress.name == \"In Progress\" && <Tooltip title={task.progress.name}>\r\n                    <span className=\"d-flex align-items-center\" style={{ color: task.progress.color }} onClick={editTask}>\r\n                        {task.progress.icon}\r\n                    </span>\r\n                </Tooltip>\r\n            }\r\n\r\n            {\r\n                task.dueDate && task.dueDate != \"\" && <Tooltip title=\"Due date\">\r\n                    <span className=\"text-with-icon\">\r\n                        <CalendarTodayIcon />{getDateFormat(task.dueDate)}\r\n                    </span>\r\n                </Tooltip>\r\n            }\r\n\r\n            {\r\n                task.showCheckListOnCard == true && task.checkList.length > 0 && <Tooltip title={`${task.checkList.filter(d => d.isCompleted).length} of ${task.checkList.length} checklist items complete`}>\r\n                    <span className=\"text-with-icon\">\r\n                        <CheckCircleOutlineIcon />{task.checkList.filter(d => d.isCompleted).length}/{task.checkList.length}\r\n                    </span>\r\n                </Tooltip>\r\n            }\r\n        </div>\r\n\r\n    </div >\r\n}\r\n\r\nexport default Task;","import { TextField, List, ListItem, ListItemIcon, ListItemText, Button } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport React, { Component, useState } from 'react'\r\nimport { ITask } from '../../../model/ITask';\r\nimport { Priority, Progress, Users } from '../../../utils/items';\r\nimport './add-task.scss';\r\n\r\ninterface IProps {\r\n    bucketIndex: number;\r\n    createTaskInBucket: Function;\r\n}\r\n\r\ninterface IState extends ITask {\r\n    // taskName: string;\r\n    // dueDate: Date | any;\r\n    // assignedTo: Array<any>,\r\n    // isCompleted: boolean\r\n}\r\n\r\nexport default class AddTask extends Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            taskId: null,\r\n            taskName: '',\r\n            startDate: '',\r\n            dueDate: '',\r\n            assignedTo: [],\r\n            progress: Progress.find(d => d.name == \"Not Started\"),\r\n            label: [],\r\n            priority: Priority.find(d => d.name == \"Medium\"),\r\n            notes: \"\",\r\n            showNotesOnCard: false,\r\n            checkList: [],\r\n            showCheckListOnCard: false,\r\n            comments: \"\"\r\n        };\r\n    }\r\n\r\n    createTask(bucketIndex: number) {\r\n        this.props.createTaskInBucket(bucketIndex, this.state);\r\n        this.setState({\r\n            taskId: null,\r\n            taskName: '',\r\n            startDate: '',\r\n            dueDate: '',\r\n            assignedTo: [],\r\n            progress: Progress.find(d => d.name == \"Not Started\"),\r\n            label: [],\r\n            priority: Priority.find(d => d.name == \"Medium\"),\r\n            notes: \"\",\r\n            showNotesOnCard: false,\r\n            checkList: [],\r\n            showCheckListOnCard: false,\r\n            comments: \"\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"add-new-task\">\r\n                <TextField autoFocus id=\"add-task\" label=\"Enter a task name\"\r\n                    size=\"small\" variant=\"outlined\" value={this.state.taskName} onChange={(e) => { this.setState({ taskName: e.currentTarget.value }) }} />\r\n\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"Set due date\"\r\n                    type=\"date\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    value={this.state.dueDate}\r\n                    onChange={(e) => this.setState({ dueDate: e.currentTarget.value })}\r\n                />\r\n\r\n                <Autocomplete\r\n                    multiple\r\n                    size=\"small\"\r\n                    limitTags={0}\r\n                    onChange={(event: any, selection: any) => {\r\n                        this.setState({\r\n                            assignedTo: selection\r\n                        })\r\n                    }}\r\n                    value={this.state.assignedTo}\r\n                    id=\"combo-box-demo\"\r\n                    options={Users}\r\n                    filterSelectedOptions\r\n                    disableCloseOnSelect={true}\r\n                    getOptionLabel={(option: any) => option.name}\r\n                    className=\"w-100\"\r\n                    renderInput={(params) => <TextField {...params} label=\"Assign\" variant=\"outlined\" />}\r\n                />\r\n\r\n                {\r\n                    this.state.assignedTo.length > 0 && <List className=\"py-0\">\r\n                        {\r\n                            this.state.assignedTo.map((d: any, assignedToIndex: number) => {\r\n                                return <ListItem key={assignedToIndex} className=\"px-0 pt-0\">\r\n                                    <ListItemIcon className=\"list-item-width\">\r\n                                        <AccountCircle />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary={d.name} />\r\n                                </ListItem>\r\n                            })\r\n                        }\r\n                    </List>\r\n                }\r\n\r\n                <Button className=\"w-100 text-transform-none\" variant=\"contained\" color=\"primary\" disabled={this.state.taskName.trim() == \"\"}\r\n                    onClick={() => { this.createTask(this.props.bucketIndex) }}>Add Task</Button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, IconButton, InputLabel, LinearProgress, List, ListItem, ListItemIcon, ListItemText, MenuItem, Modal, Select, TextField } from '@material-ui/core'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport RadioButtonUncheckedOutlinedIcon from '@material-ui/icons/RadioButtonUncheckedOutlined';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { Users, ColorLabels, Priority, Progress } from '../../../utils/items';\r\nimport { ITask } from '../../../model/ITask';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport './edit-task.scss'\r\n\r\nexport default function EditTask({ taskToEdit, open, onClose, buckets, onMakeNewTask }) {\r\n\r\n    const [updatedTask, setUpdatedTask] = useState<ITask>({ ...taskToEdit.task, oldBucketIndex: taskToEdit.bucketIndex });\r\n    const [selectedBucket, setSelectedBucket] = useState(buckets[taskToEdit.bucketIndex].bucketId)\r\n    const [checkListItem, setCheckListItem] = useState(\"\");\r\n    const [disableCloseButton, setDisableCloseButton] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        onClose({ isSaved: false, updatedTask: null });\r\n    }\r\n\r\n    function updateStateValue(propertyName, value) {\r\n        setUpdatedTask((oldValues) => ({\r\n            ...oldValues,\r\n            [propertyName]: value\r\n        }));\r\n    }\r\n\r\n    function updateTask() {\r\n        onClose({ isSaved: true, updatedTask: updatedTask });\r\n    }\r\n\r\n    function makeNewTask({ text, isCompleted, checkListIndex }) {\r\n        onMakeNewTask({ text, isCompleted, taskId: updatedTask.taskId, bucketIndex: updatedTask.oldBucketIndex });\r\n        deleteCheckListItem(checkListIndex);\r\n\r\n        setDisableCloseButton(true);\r\n    }\r\n\r\n    function deleteCheckListItem(checkListItemIndex: number) {\r\n        const checkList = updatedTask.checkList;\r\n        checkList.splice(checkListItemIndex, 1);\r\n        setUpdatedTask((oldValues) => ({\r\n            ...oldValues,\r\n            checkList: checkList\r\n        }));\r\n    }\r\n\r\n    function generateId() {\r\n        const date = new Date();\r\n        return Number(`${date.getDate()}${date.getMonth()}${date.getFullYear()}${date.getHours()}${date.getMinutes()}${date.getSeconds()}${date.getMilliseconds()}`)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            disableBackdropClick={true}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n        >\r\n            <div className=\"custom-modal\">\r\n                <div className=\"modal-body\">\r\n\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <Checkbox color=\"primary\" icon={<RadioButtonUncheckedOutlinedIcon />} checkedIcon={<CheckCircleIcon />} name=\"taskCheck\"\r\n                            checked={updatedTask.progress.name == \"Completed\"} onChange={(ev) => {\r\n                                updateStateValue('progress', ev.target.checked == true ?\r\n                                    Progress.find(d => d.name == \"Completed\") : Progress.find(d => d.name == \"Not Completed\"))\r\n                            }} />\r\n                        <TextField className=\"w-100\" id=\"outlined-basic\" size=\"small\" defaultValue={updatedTask.taskName} label=\"Task name\" variant=\"outlined\"\r\n                            onChange={(e) => { updateStateValue('taskName', e.currentTarget.value) }} />\r\n                    </div>\r\n\r\n                    {/* Assign */}\r\n                    <Autocomplete\r\n                        multiple\r\n                        size=\"small\"\r\n                        limitTags={0}\r\n                        onChange={(event: any, selection: any) => {\r\n                            updateStateValue('assignedTo', selection);\r\n                        }}\r\n                        value={[...updatedTask.assignedTo]}\r\n                        id=\"combo-box-demo\"\r\n                        filterSelectedOptions\r\n                        options={Users}\r\n                        disableCloseOnSelect={true}\r\n                        getOptionLabel={(option: any) => option.name}\r\n                        className=\"w-100 mt-2\"\r\n                        renderInput={(params) => <TextField {...params} label=\"Assign\" variant=\"outlined\" />}\r\n                    />\r\n\r\n                    {\r\n                        updatedTask.assignedTo.length > 0 && <List className=\"py-0 mt-2\">\r\n                            {\r\n                                updatedTask.assignedTo.map((d: any, assignedToIndex: number) => {\r\n                                    return <ListItem key={assignedToIndex} className=\"px-0 pt-0\">\r\n                                        <ListItemIcon className=\"list-item-width\">\r\n                                            <AccountCircle />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary={d.name} />\r\n                                    </ListItem>\r\n                                })\r\n                            }\r\n                        </List>\r\n                    }\r\n\r\n                    {/* Label */}\r\n                    <Autocomplete\r\n                        multiple\r\n                        size=\"small\"\r\n                        onChange={(event: any, selection: any) => {\r\n                            updateStateValue('label', selection);\r\n                        }}\r\n                        value={[...updatedTask.label]}\r\n                        id=\"combo-box-demo\"\r\n                        options={ColorLabels}\r\n                        disableCloseOnSelect={true}\r\n                        filterSelectedOptions\r\n                        className=\"w-100 mt-2\"\r\n                        getOptionLabel={(option: any) => option.name}\r\n                        renderInput={(params) => <TextField {...params} label=\"Label\" variant=\"outlined\" />}\r\n                    />\r\n\r\n                    <Grid container spacing={3} className=\"mt-2\">\r\n                        <Grid item xs={6}>\r\n                            <FormControl className=\"w-100\" variant=\"outlined\">\r\n                                <InputLabel id=\"bucket-label\">Bucket</InputLabel>\r\n                                <Select\r\n                                    labelId=\"bucket-label\"\r\n                                    id=\"bucket\"\r\n                                    value={selectedBucket}\r\n                                    onChange={(e) => {\r\n                                        const bucketIndex = buckets.findIndex(d => d.bucketId == e.target.value);\r\n                                        updateStateValue('newBucketIndex', bucketIndex);\r\n                                        setSelectedBucket(e.target.value);\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        buckets.map((d: any, bucketIndex: number) => {\r\n                                            return <MenuItem key={bucketIndex} value={d.bucketId}>{d.bucketName}</MenuItem>\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <FormControl className=\"w-100\" variant=\"outlined\">\r\n                                <InputLabel id=\"progress-label\">Progress</InputLabel>\r\n                                <Select\r\n                                    className=\"select-control\"\r\n                                    labelId=\"progress-label\"\r\n                                    id=\"progress\"\r\n                                    value={updatedTask.progress.name}\r\n                                    onChange={(e) => {\r\n                                        updateStateValue('progress', Progress.find(d => d.name == e.target.value));\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        Progress.map((d: any, progressIndex: number) => {\r\n                                            return <MenuItem key={progressIndex} value={d.name} className=\"d-flex align-items-center gap-10\">\r\n                                                <span style={{ color: d.color }}>\r\n                                                    {d.icon}\r\n                                                </span>{d.name}\r\n                                            </MenuItem>\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <FormControl className=\"w-100\" variant=\"outlined\">\r\n                                <InputLabel id=\"priority-label\">Priority</InputLabel>\r\n                                <Select\r\n                                    className=\"select-control\"\r\n                                    labelId=\"priority-label\"\r\n                                    id=\"priority\"\r\n                                    value={updatedTask.priority.name}\r\n                                    onChange={(e) => {\r\n                                        updateStateValue('priority', Priority.find(d => d.name == e.target.value));\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        Priority.map((d: any, priorityIndex: number) => {\r\n                                            return <MenuItem key={priorityIndex} value={d.name} className=\"d-flex align-items-center gap-10\">\r\n                                                <span style={{ color: d.color }}>\r\n                                                    {d.icon}\r\n                                                </span>{d.name}\r\n                                            </MenuItem>\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                id=\"date\"\r\n                                label=\"Set start date\"\r\n                                type=\"date\"\r\n                                className=\"w-100\"\r\n                                variant=\"outlined\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                value={updatedTask.startDate}\r\n                                onChange={(e) => updateStateValue('startDate', e.currentTarget.value)}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                id=\"date\"\r\n                                label=\"Set due date\"\r\n                                type=\"date\"\r\n                                className=\"w-100\"\r\n                                variant=\"outlined\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                value={updatedTask.dueDate}\r\n                                onChange={(e) => updateStateValue('dueDate', e.currentTarget.value)}\r\n                            />\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                    <TextField\r\n                        id=\"notes\"\r\n                        label=\"Notes\"\r\n                        multiline\r\n                        rows={4}\r\n                        className=\"w-100 mt-2\"\r\n                        defaultValue={updatedTask.notes}\r\n                        onChange={(e) => updateStateValue('notes', e.currentTarget.value)}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    {\r\n                        updatedTask.notes.trim() != \"\" && <FormGroup row>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={updatedTask.showNotesOnCard}\r\n                                        onChange={(ev) => {\r\n                                            updateStateValue('showNotesOnCard', ev.target.checked);\r\n\r\n                                            if (ev.target.checked && updatedTask.showCheckListOnCard) {\r\n                                                updateStateValue('showCheckListOnCard', false)\r\n                                            }\r\n                                        }}\r\n                                        name=\"show-notes-on-card\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Show on card\"\r\n                            />\r\n                        </FormGroup>\r\n                    }\r\n\r\n                    <Grid container spacing={2} className=\"mt-2\">\r\n                        <Grid item xs={3} className=\"d-flex align-items-center\">\r\n                            <h5>Checklist &emsp; {updatedTask.checkList.filter(d => d.isCompleted).length}/{updatedTask.checkList.length} </h5>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={5} className=\"checklist-progress\">\r\n                            {\r\n                                updatedTask.checkList.length > 0 && <LinearProgress variant=\"determinate\" value={(updatedTask.checkList.filter(d => d.isCompleted).length / updatedTask.checkList.length) * 100} />\r\n                            }\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4} className=\"d-flex place-content-end\">\r\n                            <FormGroup row>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={updatedTask.showCheckListOnCard}\r\n                                            onChange={(ev) => {\r\n                                                updateStateValue('showCheckListOnCard', ev.target.checked)\r\n\r\n                                                if (ev.target.checked && updatedTask.showNotesOnCard) {\r\n                                                    updateStateValue('showNotesOnCard', false)\r\n                                                }\r\n                                            }}\r\n                                            name=\"show-notes-on-card\"\r\n                                            color=\"primary\"\r\n                                        />\r\n                                    }\r\n                                    label=\"Show on card\"\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className=\"mt-2\">\r\n\r\n                        {\r\n                            updatedTask.checkList.map((d: any, checkListIndex: number) => {\r\n                                return <Grid container spacing={1} key={generateId() + checkListIndex}>\r\n                                    <Grid item xs={1}>\r\n                                        <Checkbox color=\"primary\" icon={<RadioButtonUncheckedOutlinedIcon />} checkedIcon={<CheckCircleIcon />} name={`checklist-${checkListIndex}`}\r\n                                            checked={d.isCompleted} onChange={(ev) => {\r\n                                                const checkList = updatedTask.checkList;\r\n                                                checkList[checkListIndex].isCompleted = ev.target.checked;\r\n                                                updateStateValue('checkList', checkList);\r\n                                            }} />\r\n                                    </Grid>\r\n                                    <Grid item xs={9} className=\"d-flex align-items-center\">\r\n                                        <TextField className=\"w-100\" id=\"outlined-basic\" size=\"small\" defaultValue={d.text}\r\n                                            onBlur={(ev) => {\r\n                                                const checkList = updatedTask.checkList;\r\n                                                checkList[checkListIndex].text = ev.target.value;\r\n                                                updateStateValue('checkList', checkList);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={2}>\r\n                                        <IconButton onClick={(e: any) => { makeNewTask({ text: d.text, isCompleted: d.isCompleted, checkListIndex: checkListIndex }) }} color=\"primary\" component=\"span\">\r\n                                            <ArrowUpwardIcon />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={(e: any) => { deleteCheckListItem(checkListIndex) }} color=\"primary\" component=\"span\">\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            })\r\n                        }\r\n\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <Checkbox color=\"primary\" icon={<RadioButtonUncheckedOutlinedIcon />} checkedIcon={<CheckCircleIcon />}\r\n                                checked={false} disabled={true} />\r\n                            <TextField className=\"w-100\" id=\"outlined-basic\" value={checkListItem} size=\"small\" label=\"Add an item\" variant=\"outlined\"\r\n                                onChange={(e) => { setCheckListItem(e.currentTarget.value) }}\r\n                                onBlur={(e) => {\r\n                                    if (e.currentTarget.value.trim() != \"\") {\r\n                                        const checkList = updatedTask.checkList;\r\n                                        checkList.push({ text: e.currentTarget.value, isCompleted: false });\r\n                                        updateStateValue('checkList', checkList);\r\n                                        setCheckListItem(\"\");\r\n                                    }\r\n                                }} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TextField\r\n                        id=\"comments\"\r\n                        label=\"Comments\"\r\n                        multiline\r\n                        rows={4}\r\n                        className=\"w-100 mt-2\"\r\n                        defaultValue={updatedTask.comments}\r\n                        onChange={(e) => updateStateValue('comments', e.currentTarget.value)}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <div className=\"modal-footer mt-2\">\r\n                        <div className=\"footer-buttons\">\r\n                            <Button onClick={updateTask} variant=\"contained\" color=\"primary\">Save</Button>\r\n                            <Button onClick={handleClose} variant=\"contained\" color=\"secondary\" className=\"ml-2\"\r\n                                disabled={disableCloseButton}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </Modal>\r\n\r\n    )\r\n}\r\n","import { Accordion, AccordionDetails, AccordionSummary, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, List, ListItem, ListItemText, Popover, TextField, Typography } from '@material-ui/core';\r\nimport React, { createContext, useState } from 'react';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Task from '../task/task';\r\nimport AddTask from '../task/add-task/add-task';\r\nimport { useDrop } from 'react-dnd';\r\nimport { ItemTypes, Priority, Progress } from '../../utils/items';\r\nimport EditTask from '../task/edit-task/edit-task';\r\nimport { ITask } from '../../model/ITask';\r\nimport './tasks.scss';\r\n\r\ninterface IBucket {\r\n    bucketId: number;\r\n    bucketName: string;\r\n    tasks?: Array<ITask>;\r\n    isAddingNewTask?: boolean;\r\n    openPopoverOption?: boolean;\r\n    isBucketNameInEditMode?: boolean;\r\n}\r\n\r\nexport const CardContext = createContext({\r\n    moveCard: null\r\n});\r\n\r\nexport default function Tasks() {\r\n    const [buckets, setBuckets] = useState<IBucket[]>([{\r\n        bucketId: 1,\r\n        bucketName: \"To do\",\r\n        tasks: [],\r\n        isAddingNewTask: false,\r\n        isBucketNameInEditMode: false,\r\n        openPopoverOption: false\r\n    }]);\r\n\r\n    const [addingNewBucket, setAddingNewBucket] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [updateBucketName, setUpdateBucketName] = useState(null);\r\n    const [activeBucketToAddTask, setActiveBucketToAddTask] = useState(0)\r\n    const [activeBucketToEditOrDelete, setActiveBucketToEditOrDelete] = useState(-1);\r\n\r\n    const [taskToEdit, setTaskToEdit] = useState({ task: null, bucketIndex: -1 })\r\n    const [bucketToRemove, setBucketToRemove] = useState({ bucketIndex: -1, text: null, show: false });\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n\r\n    const notStarted = Progress.find(d => d.name == \"Not Started\");\r\n    const inProgress = Progress.find(d => d.name == \"In Progress\");\r\n    const completed = Progress.find(d => d.name == \"Completed\");\r\n\r\n    const TasksBucket = ({ bucketIndex, tasks, isCompletedBlock }) => {\r\n        const [{ isOver }, drop] = useDrop({\r\n            accept: ItemTypes.CARD,\r\n            drop: (item) => {\r\n                const sourceBucketIndex = item[\"bucketIndex\"];\r\n                const targetBucketIndex = bucketIndex;\r\n\r\n                if (sourceBucketIndex == targetBucketIndex) {\r\n                    // if (item[\"isCompleted\"] != isCompletedBlock) {\r\n                    const sourceTasks = buckets[sourceBucketIndex].tasks;\r\n\r\n                    const indexOfTask = sourceTasks.findIndex(d => d.taskId == item[\"taskId\"]);\r\n                    sourceTasks[indexOfTask].progress = isCompletedBlock ? completed : (sourceTasks[indexOfTask].progress.name == completed.name ? notStarted : sourceTasks[indexOfTask].progress);\r\n\r\n                    buckets[sourceBucketIndex].tasks = sourceTasks;\r\n                    setBuckets([...buckets]);\r\n\r\n                    // }\r\n                }\r\n                else {\r\n                    const sourceTasks = buckets[sourceBucketIndex].tasks;\r\n                    const targetTasks = buckets[targetBucketIndex].tasks;\r\n\r\n                    const indexOfTask = sourceTasks.findIndex(d => d.taskId == item[\"taskId\"]);\r\n                    const taskToMove = sourceTasks.splice(indexOfTask, 1)[0];\r\n\r\n                    buckets[sourceBucketIndex].tasks = sourceTasks;\r\n\r\n                    taskToMove.progress = isCompletedBlock ? completed : (taskToMove.progress.name == completed.name ? notStarted : taskToMove.progress);\r\n                    targetTasks.push(taskToMove);\r\n\r\n                    buckets[targetBucketIndex].tasks = targetTasks;\r\n\r\n                    setBuckets([...buckets]);\r\n\r\n                }\r\n\r\n            },\r\n            collect: monitor => ({\r\n                isOver: !!monitor.isOver()\r\n            })\r\n        })\r\n\r\n        return <div ref={drop} className=\"pending-tasks\" style={{ border: isOver ? '3px dashed lightgray' : '' }}>\r\n            {\r\n                isCompletedBlock ?\r\n                    tasks.filter(d => d.progress == completed).map((task: any, taskIndex: number) => {\r\n                        return <Task key={taskIndex} task={task} bucketIndex={bucketIndex} updateTaskStatus={updateTaskStatus}\r\n                            onEditTask={onEditTask} onUpdateCheckList={onUpdateCheckList} onDeleteTask={onDeleteTask} />\r\n                    }) :\r\n                    tasks.filter(d => d.progress != completed).map((task: any, taskIndex: number) => {\r\n                        return <Task key={taskIndex} task={task} bucketIndex={bucketIndex} updateTaskStatus={updateTaskStatus}\r\n                            onEditTask={onEditTask} onUpdateCheckList={onUpdateCheckList} onDeleteTask={onDeleteTask} />\r\n                    })\r\n            }\r\n        </div>\r\n    }\r\n\r\n    function onUpdateCheckList({ bucketIndex, taskId, checkList }) {\r\n        const bucket = buckets[bucketIndex];\r\n        const taskIndex = bucket.tasks.findIndex(d => d.taskId == taskId);\r\n\r\n        bucket.tasks[taskIndex].checkList = checkList;\r\n        setBuckets([...buckets]);\r\n    }\r\n\r\n    function onEditTask({ task, bucketIndex }) {\r\n        setTaskToEdit({ task: task, bucketIndex: bucketIndex });\r\n    }\r\n\r\n    function updateTaskStatus({ bucketIndex, taskId, updatedTaskStatus }) {\r\n        const bucket = buckets[bucketIndex];\r\n\r\n        const taskIndex = bucket.tasks.findIndex(d => d.taskId == taskId);\r\n        bucket.tasks[taskIndex].progress = updatedTaskStatus ? completed : notStarted;\r\n        setBuckets([...buckets]);\r\n    }\r\n\r\n    function handleClose() {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const openBucketOption = (event: React.MouseEvent<HTMLButtonElement>, index: number) => {\r\n        const bucket = buckets[index];\r\n        bucket.openPopoverOption = true;\r\n\r\n        buckets[index] = bucket;\r\n\r\n        setAnchorEl(event.currentTarget);\r\n        setBuckets([...buckets]);\r\n        setActiveBucketToEditOrDelete(index);\r\n    }\r\n\r\n    function generateId() {\r\n        const date = new Date();\r\n        return Number(`${date.getDate()}${date.getMonth()}${date.getFullYear()}${date.getHours()}${date.getMinutes()}${date.getSeconds()}${date.getMilliseconds()}`)\r\n    }\r\n\r\n    function addNewBucket(bucketName: string) {\r\n        if (bucketName.trim() != \"\") {\r\n            const newBucket: IBucket = {\r\n                bucketId: generateId(),\r\n                bucketName: bucketName,\r\n                isBucketNameInEditMode: false,\r\n                tasks: [],\r\n                isAddingNewTask: false,\r\n                openPopoverOption: false,\r\n\r\n            };\r\n\r\n            setBuckets([...buckets, newBucket]);\r\n            // this.setState({\r\n            //     buckets: [...this.state.buckets, newBucket],\r\n            //     addingNewBucket: false\r\n            // })\r\n        }\r\n        setAddingNewBucket(false);\r\n        // this.setState({\r\n        //     addingNewBucket: false\r\n        // })\r\n    }\r\n\r\n    function editBucketName() {\r\n        const bucket = buckets[activeBucketToEditOrDelete];\r\n        bucket.isBucketNameInEditMode = true;\r\n        bucket.openPopoverOption = false;\r\n\r\n        buckets[activeBucketToEditOrDelete] = bucket;\r\n\r\n        setBuckets([...buckets]);\r\n        setAnchorEl(null);\r\n        setUpdateBucketName(bucket.bucketName);\r\n    }\r\n\r\n    function openBucketDeleteModal() {\r\n        setBucketToRemove({ bucketIndex: activeBucketToEditOrDelete, text: buckets[activeBucketToEditOrDelete].bucketName, show: true })\r\n    }\r\n\r\n    function closeUpdateBucketName(index: number) {\r\n        buckets[index].isBucketNameInEditMode = false;\r\n        buckets[index].bucketName = updateBucketName;\r\n        buckets[index].openPopoverOption = false;\r\n\r\n        setBuckets([...buckets]);\r\n    }\r\n\r\n    function addNewTask(index: number) {\r\n        const bucket = buckets[index];\r\n        bucket.isAddingNewTask = !bucket.isAddingNewTask;\r\n\r\n        buckets[index] = bucket;\r\n\r\n        setBuckets([...buckets]);\r\n        setAnchorEl(null);\r\n        setActiveBucketToAddTask(index);\r\n    }\r\n\r\n    function createTaskInBucket(index: number, newTask: any) {\r\n        newTask.taskId = generateId();\r\n        buckets[index].tasks = [newTask, ...buckets[index].tasks];\r\n        buckets[index].isAddingNewTask = true;\r\n\r\n        setBuckets([...buckets]);\r\n        setActiveBucketToAddTask(index);\r\n    }\r\n\r\n    function onEditTaskClose({ isSaved, updatedTask }) {\r\n        if (isSaved) {\r\n            if (updatedTask.newBucketIndex == undefined || updatedTask.newBucketIndex == updatedTask.oldBucketIndex) {\r\n                const tasks = buckets[updatedTask.oldBucketIndex].tasks;\r\n                const getTaskIndex = tasks.findIndex((d: ITask) => { return d.taskId == updatedTask.taskId });\r\n\r\n                tasks[getTaskIndex] = updatedTask;\r\n\r\n                buckets[updatedTask.oldBucketIndex].tasks = tasks;\r\n                setBuckets([...buckets]);\r\n            }\r\n            else {\r\n                const oldBucketTasks = buckets[updatedTask.oldBucketIndex].tasks;\r\n                const newBucketTasks = buckets[updatedTask.newBucketIndex].tasks;\r\n\r\n                newBucketTasks.push(updatedTask);\r\n                buckets[updatedTask.newBucketIndex].tasks = newBucketTasks;\r\n\r\n                const getTaskIndex = oldBucketTasks.findIndex((d: ITask) => { return d.taskId == updatedTask.taskId });\r\n\r\n                oldBucketTasks.splice(getTaskIndex, 1);\r\n                buckets[updatedTask.oldBucketIndex].tasks = oldBucketTasks;\r\n\r\n                setBuckets([...buckets]);\r\n            }\r\n            setTaskToEdit({ task: null, bucketIndex: -1 });\r\n        }\r\n        else {\r\n            setTaskToEdit({ task: null, bucketIndex: -1 });\r\n        }\r\n    }\r\n\r\n    function onMakeNewTask({ text, isCompleted, taskId, bucketIndex }) {\r\n        const bucket = buckets[bucketIndex];\r\n        const tasks = bucket.tasks;\r\n\r\n        tasks.push({\r\n            taskId: generateId(),\r\n            taskName: text,\r\n            startDate: '',\r\n            dueDate: '',\r\n            assignedTo: [],\r\n            progress: Progress.find(d => d.name == \"Not Started\"),\r\n            label: [],\r\n            priority: Priority.find(d => d.name == \"Medium\"),\r\n            notes: \"\",\r\n            showNotesOnCard: false,\r\n            checkList: [],\r\n            showCheckListOnCard: false,\r\n            comments: \"\"\r\n        });\r\n\r\n        buckets[bucketIndex].tasks = tasks;\r\n        setBuckets([...buckets]);\r\n\r\n        // const indexOfTask = tasks.findIndex(d => d.taskId == taskId);\r\n        // const checkList = tasks[indexOfTask].checkList;\r\n\r\n    }\r\n\r\n    function removeBucket(bucketIndex: number) {\r\n        buckets.splice(bucketIndex, 1);\r\n        setBuckets(buckets);\r\n        setBucketToRemove({ bucketIndex: -1, text: null, show: false });\r\n    }\r\n\r\n    function onDeleteTask(bucketIndex: number, taskId: number) {\r\n        const bucket = buckets[bucketIndex];\r\n        const tasks = bucket.tasks;\r\n\r\n        const indexOfTask = tasks.findIndex(d => d.taskId == taskId);\r\n        tasks.splice(indexOfTask, 1);\r\n\r\n        buckets[bucketIndex].tasks = tasks;\r\n        setBuckets([...buckets]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tasks-main\">\r\n            <div className=\"main-container\">\r\n                {\r\n                    buckets.map((bucket, bucketIndex) => {\r\n                        return <div key={bucket.bucketId} className=\"bucket\">\r\n\r\n                            {\r\n                                bucket.isBucketNameInEditMode ?\r\n                                    <TextField autoFocus id=\"edit-bucket\" label=\"Bucket Name\" onBlur={() => { closeUpdateBucketName(bucketIndex) }}\r\n                                        size=\"small\" variant=\"outlined\" defaultValue={updateBucketName} onChange={(e) => { setUpdateBucketName(e.currentTarget.value) }} />\r\n                                    :\r\n                                    <div className=\"bucket-top\">\r\n                                        <span>\r\n                                            <b>{bucket.bucketName}</b>\r\n                                        </span>\r\n\r\n                                        <div>\r\n                                            <IconButton aria-describedby={id} onClick={(e: any) => { openBucketOption(e, bucketIndex) }} color=\"primary\"\r\n                                                component=\"span\">\r\n                                                <MoreHorizIcon />\r\n                                            </IconButton>\r\n\r\n                                            <Popover open={open}\r\n                                                id={id}\r\n                                                anchorEl={anchorEl}\r\n                                                anchorOrigin={{\r\n                                                    vertical: 'top',\r\n                                                    horizontal: 'left',\r\n                                                }}\r\n                                                transformOrigin={{\r\n                                                    vertical: 'top',\r\n                                                    horizontal: 'left',\r\n                                                }}>\r\n                                                <List style={{ width: 200 }}\r\n                                                    onMouseLeave={handleClose}>\r\n                                                    <ListItem button onClick={() => { editBucketName() }}>\r\n                                                        <ListItemText primary=\"Rename\" />\r\n                                                    </ListItem>\r\n                                                    <ListItem button onClick={() => { openBucketDeleteModal() }}>\r\n                                                        <ListItemText primary=\"Delete\" />\r\n                                                    </ListItem>\r\n                                                </List>\r\n\r\n                                            </Popover>\r\n                                        </div>\r\n                                    </div>\r\n                            }\r\n\r\n                            <div className=\"add-new-task-block\">\r\n                                <div className=\"mb-3\">\r\n                                    <Button className=\"w-100 text-transform-none\" variant=\"contained\" color=\"primary\"\r\n                                        onClick={() => { addNewTask(bucketIndex) }} startIcon={<AddIcon />}>Add Task</Button>\r\n                                </div>\r\n\r\n                                {/* Add New Task Block */}\r\n                                {\r\n                                    bucket.isAddingNewTask && bucketIndex == activeBucketToAddTask &&\r\n                                    <AddTask bucketIndex={bucketIndex} createTaskInBucket={createTaskInBucket} />\r\n                                }\r\n\r\n                                {/* Tasks which are still active */}\r\n                                <TasksBucket bucketIndex={bucketIndex} tasks={bucket.tasks} isCompletedBlock={false} />\r\n\r\n                                {/* Tasks which are completed */}\r\n                                {\r\n                                    bucket.tasks.find(d => d.progress == completed) && <Accordion>\r\n                                        <AccordionSummary className=\"according-header-bg-color\"\r\n                                            expandIcon={<ExpandMoreIcon />}\r\n                                            aria-controls=\"panel1a-content\"\r\n                                            id=\"panel1a-header\">\r\n                                            <Typography>Copmpleted Tasks {bucket.tasks.filter(d => d.progress == completed).length}</Typography>\r\n                                        </AccordionSummary>\r\n                                        <AccordionDetails className=\"d-block\">\r\n                                            <TasksBucket bucketIndex={bucketIndex} tasks={bucket.tasks} isCompletedBlock={true} />\r\n                                        </AccordionDetails>\r\n                                    </Accordion>\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                    })\r\n                }\r\n\r\n                <div style={{ minWidth: 300 }}>\r\n                    {\r\n                        addingNewBucket ?\r\n                            <TextField autoFocus id=\"new-bucket\" label=\"Bucket Name\" onBlur={(e) => { addNewBucket(e.currentTarget.value) }}\r\n                                size=\"small\" variant=\"outlined\" /> :\r\n                            <Button onClick={() => { setAddingNewBucket(true) }} className=\"btn\">Add New Bucket</Button>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                taskToEdit.task && <EditTask taskToEdit={taskToEdit} open={taskToEdit.task ? true : false}\r\n                    buckets={buckets.map(d => { return { bucketId: d.bucketId, bucketName: d.bucketName } })} onClose={onEditTaskClose}\r\n                    onMakeNewTask={onMakeNewTask} />\r\n            }\r\n\r\n            <div>\r\n                <Dialog\r\n                    open={bucketToRemove.show}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">Are you sure ?</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            You want to remove bucket <b>{bucketToRemove.text}</b>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => { setBucketToRemove({ bucketIndex: -1, text: null, show: false }) }} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => { removeBucket(bucketToRemove.bucketIndex) }} color=\"primary\" autoFocus>\r\n                            Ok\r\n                     </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react';\nimport Tasks from './components/tasks/tasks';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport './App.scss';\n\nfunction App() {\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Tasks />\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}